# Copyright (C) 2009-2012 The Bitcoin Core Developers
# Copyright (C) 2012-2014 The PPCoin Developers
# Copyright (C) 2014 The Magi Core Developers
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

CXX=llvm-g++

# macports
#DEPSDIR=/opt/local

#homebrew
DEPSDIR=/usr/local/Cellar

# :=0 --> UPnP support turned off by default at runtime
# :=1 --> UPnP support turned on by default at runtime
# :=- --> No UPnP support - miniupnp not required
USE_UPNP:=-

# :=1 --> Enable IPv6 support
# :=0 --> Disable IPv6 support
USE_IPV6:=1

INCLUDEPATHS= \
 -I"$(CURDIR)" \
 -I"$(CURDIR)"/obj \
 -I"$(DEPSDIR)/include" \
 -I"$(DEPSDIR)/berkeley-db@4/4.8.30/include" \
 -I"$(DEPSDIR)/openssl/1.0.2o_2/include"

LIBPATHS= \
 -L"$(DEPSDIR)" \
 -L"$(DEPSDIR)/berkeley-db@4/4.8.30/lib" \
 -L"$(DEPSDIR)/leveldb/1.20_2/lib"

LIBS = -dead_strip

TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)

# was mt-s (doesn't exist in macport install today)
BOOST_LIB_SUFFIX=-mt

#ifdef STATIC
# Build STATIC if you are redistributing the binary
#DEPSDIR=/opt/crypt

# NOTE: File library (.a) does not exist
#TESTLIBS += \
# $(DEPSDIR)/lib/libboost_unit_test_framework-mt.a

#LIBS += \
# $(DEPSDIR)/lib/libdb_cxx-4.8.a \
# $(DEPSDIR)/lib/libboost_system$(BOOST_LIB_SUFFIX).a \
# $(DEPSDIR)/lib/libboost_filesystem$(BOOST_LIB_SUFFIX).a \
# $(DEPSDIR)/lib/libboost_program_options$(BOOST_LIB_SUFFIX).a \
# $(DEPSDIR)/lib/libboost_thread$(BOOST_LIB_SUFFIX).a \
# $(DEPSDIR)/lib/libssl.a \
# $(DEPSDIR)/lib/libgmp.a \
# $(DEPSDIR)/lib/libcrypto.a \
# -lz \
# -lssl \
# -lcrypto \
# -lgmp
#else
TESTLIBS += \
 -lboost_unit_test_framework$(BOOST_LIB_SUFFIX)
LIBS += \
 -ldb_cxx-4.8 \
 -lboost_system$(BOOST_LIB_SUFFIX) \
 -lboost_filesystem$(BOOST_LIB_SUFFIX) \
 -lboost_program_options$(BOOST_LIB_SUFFIX) \
 -lboost_thread$(BOOST_LIB_SUFFIX) \
 -lssl \
 -lgmp \
 -lcrypto \
 -lz
TESTDEFS += -DBOOST_TEST_DYN_LINK
#endif

DEFS=-DMAC_OSX -DMSG_NOSIGNAL=0 -DBOOST_SPIRIT_THREADSAFE

ifdef RELEASE
# Compile for maximum compatibility and smallest size.
# This requires that dependencies are compiled
# the same way.
CFLAGS = -mmacosx-version-min=10.5 -arch x86_64 -O3 -msse2
else
CFLAGS = -g -msse2
endif

# ppc doesn't work because we don't support big-endian
CFLAGS += -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter \
    $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)

OBJS= \
    obj/alert.o \
    obj/clientversion.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/key.o \
    obj/db.o \
    obj/init.o \
    obj/keystore.o \
    obj/main.o \
    obj/net.o \
    obj/protocol.o \
    obj/magirpc.o \
    obj/rpcdump.o \
    obj/rpcnet.o \
    obj/rpcmining.o \
    obj/rpcwallet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/script.o \
    obj/sync.o \
    obj/util.o \
    obj/wallet.o \
    obj/walletdb.o \
    obj/noui.o \
    obj/kernel.o \
    obj/pbkdf2.o \
    obj/keccak.o \
    obj/haval.o \
    obj/ripemd.o \
    obj/sha2.o \
    obj/sha2big.o \
    obj/tiger.o \
    obj/whirlpool.o \
    obj/magimath.o

ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
	DEFS += -DUSE_UPNP=$(USE_UPNP)
ifdef STATIC
	LIBS += $(DEPSDIR)/lib/libminiupnpc.a
else
	LIBS += -lminiupnpc
endif
endif

ifneq (${USE_IPV6}, -)
	DEFS += -DUSE_IPV6=$(USE_IPV6)
endif

all: magid

test check: test_magi FORCE
	./test_magi

#
# LevelDB support
#
LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)
DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)
OBJS += obj/txdb.o
leveldb/libleveldb.a:
	@echo "Building LevelDB ..." && cd leveldb && $(MAKE) CC=$(CC) CXX=$(CXX) OPT="$(CFLAGS)" libleveldb.a libmemenv.a && cd ..

# auto-generated dependencies:
-include obj/*.P
-include obj-test/*.P

obj/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj/build.h
clientversion.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO

obj/%.o: %.cpp
	$(CXX) -c $(CFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: %.c
	$(CXX) -c $(CFLAGS) -fpermissive -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: hash/%.cpp
	$(CXX) -c $(CFLAGS) -fpermissive -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: hash/%.c
	$(CXX) -c $(CFLAGS) -fpermissive -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

magid: $(OBJS:obj/%=obj/%)
	$(CXX) $(CFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)

TESTOBJS := $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp))

obj-test/%.o: test/%.cpp
	$(CXX) -c $(TESTDEFS) $(CFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

test_magi: $(TESTOBJS) $(filter-out obj/init.o,$(OBJS:obj/%=obj/%))
	$(CXX) $(CFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS) $(TESTLIBS)

clean:
	-rm -f magid test_magi
	-rm -f obj/*.o
	-rm -f obj-test/*.o
	-rm -f obj/*.P
	-rm -f obj-test/*.P
	-rm -f obj/build.h
	-cd leveldb && $(MAKE) clean || true

FORCE:
